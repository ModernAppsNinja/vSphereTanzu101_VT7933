name: test_grading
on:
  pull_request_target:
    types: [opened]
    paths:
    - 'static/admin/userdata/tests/**.yml'

jobs:
  job_test_grading:
    name: test_grading
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.ismember.outputs.ismember }}
    steps:
      - name: review event details
        run: |
          env
          cat /home/runner/work/_temp/_github_workflow/event.json
      - name: set org/repo as org_repo
        run: |
          echo $(echo org_repo="$GITHUB_REPOSITORY") >> $GITHUB_ENV
          echo $org_repo
      - name: curl member record file
        run: |
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernapsninja/admin-private/main/userdata/members/${{ github.event.sender.login }}_${{ github.event.sender.id }}.json" \
          -o /tmp/raw_member_record_curl.json
      - name: check if member record exists
        run: |
          cat /tmp/raw_member_record_curl.json
          if [ $(wc -l <"/tmp/raw_member_record_curl.json") -ge 2 ]
          then
            echo ismember=true >> $GITHUB_ENV
            echo "the requesting user is a member"
          else
            echo ismember=false >> $GITHUB_ENV
            echo "the requesting user is not a member"
          fi
          echo $ismember
      - id: ismember
        if: env.ismember == 'true'
        run: echo "::set-output name=ismember::true"
      - name: if not member, post message to pr
        if: env.ismember == 'false'
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"event": "COMMENT", "body": "@${{ github.event.sender.login }} You must first register as a member at https://modernapps.ninja before you can register for a course. Please open a new registration request after you have completed the modernapps.ninja member registration. This Pull Request will now be closed, thank you!"}' \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}/reviews" \
          -o /tmp/pr_comment_post_response.json
          cat /tmp/pr_comment_post_response.json
      - name: if not member, close pr
        if: env.ismember == 'false'
        run: |
          curl -X PATCH \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"state": "closed"}' \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}" \
          -o /tmp/close_pr_response.json
          cat /tmp/close_pr_response.json
  job_course_registration:
    name: course_registration
    needs: job_verify_membership
    runs-on: ubuntu-latest
    if: needs.job_verify_membership.outputs.ismember == 'true'
    steps:
      - name: review event details
        run: |
          env
          cat /home/runner/work/_temp/_github_workflow/event.json
      - name: set org/repo as org_repo
        run: |
          echo $(echo org_repo="$GITHUB_REPOSITORY") >> $GITHUB_ENV
          echo $org_repo
      - name: curl member record file
        run: |
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernapsninja/admin-private/main/userdata/members/${{ github.event.sender.login }}_${{ github.event.sender.id }}.json" \
          -o /tmp/raw_member_record_curl.json
      # - name: upload course.md file to member repo 
      # - name: upload image for course.md file to member repo
      # - name: 
      # - name: merge pull request
      # - name: merge pull request
      - name: merge pull request
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"commit_title": "Course Registration for ${{ github.event.sender.login }}"}'                                                        \
          "https://api.github.com/repos/${{ env.org_repo }}/pulls/${{ github.event.number }}/merge" \
          -o /tmp/course_registration_post_response.json
          cat /tmp/course_registration_post_response.json
      # - name: curl member record file
      #   run: |
      #     curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #     "https://raw.githubusercontent.com/modernapsninja/admin-private/main/userdata/members/${{ github.event.issue.user.login }}_${{ github.event.issue.user.id }}.json" \
      #     -o /tmp/raw_member_record_curl.json
      # - name: check if member record exists
      #   run: |
      #     cat /tmp/raw_member_record_curl.json
      #     if [ $(wc -l <"/tmp/raw_member_record_curl.json") -ge 2 ]
      #     then
      #       echo ninja_org_member=true >> $GITHUB_ENV
      #     else
      #       echo ninja_org_member=false >> $GITHUB_ENV
      #     fi
      #     echo $duplicate_request
      # - name: extract user preferred email and set as member_email
      #   run: |
      #     echo $(echo member_email=$(echo $(cat /tmp/issuebody.json | jq '.preferredEmailAddress' | sed 's/"//g' ))) >> $GITHUB_ENV
      #     echo $member_email
      # - name: extract user id and set as member_id # in future need to update this file to ensure a common env is used consistently for the same variable data
      #   run: |
      #     echo $(echo member_id="${{ github.event.issue.user.id }}") >> $GITHUB_ENV
      #     echo $member_id
      # - name: extract user login and set as member_id # in future need to update this file to ensure a common env is used consistently for the same variable data
      #   run: |
      #     echo $(echo member_id="${{ github.event.issue.user.login }}") >> $GITHUB_ENV
      #     echo $member_id
      # - name: set token as GITHUB_OAUTH_TOKEN
      #   run: |
      #     echo $(echo GITHUB_OAUTH_TOKEN="${{ secrets.NINJABOTGURU }}") >> $GITHUB_ENV
      #     echo $GITHUB_OAUTH_TOKEN
      # - name: set organization name as org_login
      #   run: |
      #     echo $(echo org_login="${{ github.event.organization.login }}") >> $GITHUB_ENV
      #     echo $org_login
      # - name: create member registration file for upload
      #   run: |
          
      # - name: push new member record to static/userdata/registrations/
      #   if: env.duplicate_request == 'false'
      #   run: |
      #     curl -X PUT \
      #     -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #     -H "Accept: application/vnd.github.v3+json" \
      #     -d '{"message": "Updating Member Record File For ${{ github.event.issue.user.login }}", "content": "'$(cat /tmp/issuebody.json | base64 -w 0 )'"}'                                                        \
      #     "https://api.github.com/repos/modernappsninja/admin-private/contents/userdata/members/${{ github.event.issue.user.login }}_${{ github.event.issue.user.id }}.json" \
      #     -o /tmp/member_record_post_response.json
      #     cat /tmp/member_record_post_response.json
      # - name: clone modernappsninja.github.io repo
      #   run: |
      #     git clone https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/modernappsninja/modernappsninja.github.io.git
      #     cd modernappsninja.github.io
      #     pwd
      # - name: curl orgteamregapicall.sh and make executable
      #   if: env.duplicate_request == 'false'
      #   run: |
      #     curl https://modernapps.ninja/admin/orgteamregapicall.sh -o /tmp/orgteamregapicall.sh
      #     sudo chmod +x /tmp/orgteamregapicall.sh
      # - name: make org and team invite api call
      #   if: env.duplicate_request == 'false'
      #   run: |
      #     /tmp/orgteamregapicall.sh
      # - name: create hub config file
      #   run: |
      #     echo "---" > ~/.config/hub
      #     echo "github.com: " >> ~/.config/hub
      #     echo "- oauth_token: ${{ secrets.NINJABOTGURU }}" >> ~/.config/hub
      #     echo "  user: modernappsninjabot" >> ~/.config/hub
      #     cat ~/.config/hub
      # - name: if duplicate_request true, send email duplicate registration notice
      #   if: env.duplicate_request == 'true'
      #   uses: dawidd6/action-send-mail@v2
      #   continue-on-error: true
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: modernappsninjabot@gmail.com
      #     password: ${{secrets.NINJABOT_MAIL_PASSWORD}}
      #     to: ${{ env.requesting_user_email }}
      #     from: modernappsninjabot@gmail.com
      #     subject: Your ModernApps Ninja User Registration is a Duplicate
      #     body: |
      #       Your registration request with ModernApps Ninja for github user ${{ github.event.issue.user.login }} was recieved, but was found to be a duplicate request.
      #       When you open a registration request, the github account you are logged in as at the time is used for the registration request.
      #       If you intended to request registration for a different account, please log in with the desired account first, and then open a new registration request ticket.
      #       If you believe this message to be in error, or are having issues with your account registration, please open a support request ticket at https://github.com/modernappsninja/modernappsninja.github.io
      # - name: if duplicate_request false, send email registration complete notice
      #   if: env.duplicate_request == 'false'
      #   uses: dawidd6/action-send-mail@v2
      #   continue-on-error: true
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: modernappsninjabot@gmail.com
      #     password: ${{secrets.NINJABOT_MAIL_PASSWORD}}
      #     to: ${{ env.requesting_user_email }}
      #     from: modernappsninjabot@gmail.com
      #     subject: An invite has been sent to ${{ github.event.issue.user.login }} to join the ModernApps Ninja Github org.
      #     body: |
      #       Your registration request with ModernApps Ninja for github user ${{ github.event.issue.user.login  }} was recieved and an invitation to join the org has been sent to the email associated with the ${{ github.event.issue.user.login }} is dupicate, closing" --message "The github user ${{ github.event.issue.user.login }} Github account.
      #       Before registration can be finalized for the requesting github account, you will need to view the invitation email sent by github to the email address associated with the ${{ github.event.issue.user.login }} is dupicate, closing" --message "The github user ${{ github.event.issue.user.login }} Github account.
      #       After you accept the invitation for the account to join the ModernApps Ninja Github account, a workflow will be triggered that will complete your user registration and setup your member profile page, and an email will be sent to this address when the process is complete. 
      #       Thank you for your participation and welcome to the ModernApps Ninja Community!
      # - name: if duplicate_request true, append message to issue ticket and close ticket
      #   if: env.duplicate_request == 'true'
      #   run: |
      #     cd modernappsninja.github.io
      #     hub issue update ${{ github.event.issue.number }} --message "registration request for user ${{ github.event.issue.user.login }} is dupicate, closing" --message "The github user ${{ github.event.issue.user.login }} is already registered. This request has been marked as a dupicate request and will be closed."
      #     hub issue update ${{ github.event.issue.number }} -s closed
      # - name: if duplicate_request false, append message to issue ticket and close ticket
      #   if: env.duplicate_request == 'false'
      #   run: |
      #     cd modernappsninja.github.io
      #     hub issue update ${{ github.event.issue.number }} --message "registration request for user ${{ github.event.issue.user.login }} has been processed" --message "The github user ${{ github.event.issue.user.login }} has been sent an invite to join the modernapps ninja org, and this issue ticket will now be closed."
      #     hub issue update ${{ github.event.issue.number }} -s closed
      # - name: transfer issue ticket to admin-private
      #   run: |
      #     cd modernappsninja.github.io
      #     hub issue transfer ${{ github.event.issue.number }} ${{ github.event.organization.login }}/admin-private